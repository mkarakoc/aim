FOLLOW .mybinder.org STATS
________________________________________________________________
----------------------------------------------------------------

https://grafana.mybinder.org/d/fZWsQmnmz/pod-activity?refresh=1m&orgId=1
================================================================


CREATE AND UPDATE A DOCKER IMAGE
________________________________________________________________
----------------------------------------------------------------
# REF: # https://rominirani.com/docker-tutorial-series-part-5-building-your-own-docker-images-b4a448b44afc

# HOW TO CREATE YOUR FIRST IMAGE
1. # pull base image
   docker pull ubuntu:latest
2. # create your own image
   sudo docker run -it --name aimpy ubuntu:latest
3. # commit the image 
   sudo docker commit aimpy hesap/aimpy
4. # push updated image to Docker account
   sudo docker push hesap/aimpy

HOW TO UPDATE YOUR DOCKER IMAGE
1. # remove older local image copy
    sudo docker rm aimpy
2. # run a new local image
   sudo docker run -it --name aimpy hesap/aimpy
3. # commit the image 
   sudo docker commit aimpy hesap/aimpy
4. # push updated image to Docker account
   sudo docker push hesap/aimpy
5. # you can repeat for every new update of the image

CREATE AS MANY AS TAGGED COPY OF DOCKER IMAGE
# REF: https://hub.docker.com/r/hesap/aimpy/tags/
# This way you do not need to create new Docker repos for different versions of a Docker container
# aimpy:jovyan_stable_latest_20180815_1213 = aimpy:TAG
1. sudo docker run -it --name  aimpy hesap/aimpy:jovyan_stable_latest_20180815_1213
2. sudo docker commit aimpy hesap/aimpy:jovyan_stable_latest_20180815_1213
3. sudo docker push hesap/aimpy:jovyan_stable_latest_20180815_1213

CREATE AS MANY AS LOCAL COPY OF DOCKER IMAGE
1. # create a new local image 
   sudo docker run -it --name aimpy-new hesap/aimpy
================================================================


CHANGE DNS SERVER (this is necessary in my university)
________________________________________________________________
----------------------------------------------------------------
1. echo "nameserver 10.0.128.100" | tee /etc/resolv.conf > /dev/null

# The original file at: etc/resolv.conf
# REF: https://askubuntu.com/questions/91543/apt-get-update-fails-to-fetch-files-temporary-failure-resolving-error
----------------------------------------------------------------
## Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
##     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
#search akdeniz.edu.tr
#
#nameserver 8.8.8.8
#nameserver 8.8.4.4
================================================================


INSTALL AND CONFIGURE UBUNTU 
________________________________________________________________
----------------------------------------------------------------
# install some necessary system programs
1. apt-get update && apt-get --no-install-recommends -y install sudo build-essential  wget git apt-utils m4 net-tools

# install a non-root user called jovyan with uid 1000
# REF: https://mybinder.readthedocs.io/en/latest/dockerfile.html#preparing-your-dockerfile
1. adduser --disabled-password --gecos "Default user" --uid 1000 jovyan

#**# add a user named as "main" other than root but it has sudo privileges 
#**1. useradd -m -s /bin/bash main && echo "main:main" | chpasswd && adduser main sudo
#**# delete password for user "main"
#**2. passwd --delete main
================================================================


INSTALL AND CONFIGURE PYTHON
________________________________________________________________
----------------------------------------------------------------
# instal python2 and python3
1. apt-get --no-install-recommends -y install python cython python-dev 
2. apt-get --no-install-recommends -y install python-pip python-setuptools
3. apt-get --no-install-recommends -y install python3 python3-dev 
4. apt-get --no-install-recommends -y install python3-pip python3-setuptools

# install some python2 packages
1. pip install symengine
2. pip install sympy
3. pip install matplotlib

# install some python3 packages
1. pip3 install symengine
2. pip3 install sympy
3. pip3 install matplotlib

# install jupyter for python2 and python3 (I am not sure if i need to install both)
1. pip install jupyter
2. pip3 install jupyter
================================================================


INSTALL LIBRARIES needed by FLINT
________________________________________________________________
----------------------------------------------------------------
# create a folder to store library files and folders
1. mkdir /home/main/pylibs

# download or clone: gmplib, mpfr, flint2, and arb files
1. wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.bz2
2. wget http://www.mpfr.org/mpfr-current/mpfr-4.0.1.tar.gz
3. git clone https://github.com/fredrik-johansson/flint2.git
4. git clone https://github.com/fredrik-johansson/arb.git
5. git clone https://github.com/fredrik-johansson/python-flint.git

# install gmplib
1. tar -xvf gmp-6.1.2.tar.bz2
2. cd ./gmp-6.1.2/ && ./configure && make && sudo make install && cd ..

# install mpfr
1. tar -xvf mpfr-4.0.1.tar.gz
2. cd ./mpfr-4.0.1/ && ./configure && make && sudo make install && cd ..

# install flint2 and arb
1. cd ./flint2/ && ./configure && make && sudo make install && cd ..
2. cd ./arb/ && ./configure && make && sudo make install && cd ..

# install python-flint for python2
1. cd ./python-flint
2. sudo python ./setup.py build_ext --include-dirs=/home/main/pylibs/flint2:/home/main/pylibs/arb --library-dirs=/home/main/pylibs/flint2:/home/main/pylibs/arb
3. sudo python setup.py install && cd ..
4. export LD_LIBRARY_PATH=/home/jovyan/pylibs/flint2:/home/jovyan/pylibs/arb:$LD_LIBRARY_PATH
    # This last step does not work for mybinder.org look at Dockerfile explanation below.

# install python-flint for python3
1. pip3 install python-flint
================================================================


Create a JUPYTER NOTEBOOK server without browser
________________________________________________________________
----------------------------------------------------------------

1. # to reach jupyter server outside of the Docker container
   sudo docker run -p 8888:8888 -it --name aimpy hesap/aim_trials

2. # add following lines to: /home/main/.jupyter/jupyter_notebook_config.py
   c = get_config()
   c.NotebookApp.ip = '172.17.0.58'
   c.NotebookApp.open_browser = False
   c.NotebookApp.port = 8888
   c.NotebookApp.password = u'sha1:7b7e5f97de15:0021be4ccbce7a367f35d10a3c0270a9b44f210b'

3. # run a jupyter server without notebook
   jupyter notebook --profile=nbserver &

4. # to see which jupyter servers (kernels) are on
   lsof -n -i4TCP:8888
   # output example:
    >>> COMMAND   PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME
    >>> jupyter-n  22 main    3u  IPv4 130357247      0t0  TCP 172.17.0.58:8888 (LISTEN)
    >>> jupyter-n  22 main    9u  IPv4 130361442      0t0  TCP 172.17.0.58:8888->10.7.1.69:50753 (ESTABLISHED)

5. # kill servers if you wish
   kill -9  [PID]
================================================================


INSTALL JUPYTER NOTEBOOK EXTENSIONS 
________________________________________________________________
----------------------------------------------------------------
REF: https://github.com/sagemathinc/cocalc/issues/2213

1. # if .ipython not exist create one
   mkdir .ipython

2. # install necessary packages
   pip3 install jupyter_nbextensions_configurator
   pip3 install jupyter_contrib_core

3. # clone extensions
   git clone https://github.com/ipython-contrib/jupyter_contrib_nbextensions

4. # copy extensions to .ipython
   cp -rf jupyter_contrib_nbextensions/src/jupyter_contrib_nbextensions/nbextensions/* ./ipython/nbextensions/

5. # enable extension configurator
   jupyter nbextensions_configurator enable --user

6. # enable extensions permanently till you want to disable 
    jupyter nbextension enable hide_input_all/main && 
    jupyter nbextension enable livemdpreview/livemdpreview &&
    jupyter nbextension enable rubberband/main && 
    jupyter nbextension enable toc2/main && 
    jupyter nbextension enable varInspector/main && 
    jupyter nbextension enable collapsible_headings/main && 
    jupyter nbextension enable hinterland/hinterland && 
    jupyter nbextension enable snippets_menu/main && 
    jupyter nbextension enable execute_time/ExecuteTime && 
    jupyter nbextension enable hide_input/main && 
    jupyter nbextension enable runtools/main && 
    jupyter nbextension enable toggle_all_line_numbers/main
================================================================


DOCKER FILE currently (August 2018 ) in use
________________________________________________________________
----------------------------------------------------------------
# REF: https://github.com/mkarakoc/aim/blob/master/Dockerfile
# link of the Docker container
# https://hub.docker.com/r/hesap/aimpy/tags/
FROM hesap/aimpy:jovyan_stable_latest_20180815_1213

MAINTAINER Mesut Karako√ß <mesudkarakoc@gmail.com>

# becom root to change jovyan password
USER root

### password of main user is Docker!
### REF: https://stackoverflow.com/questions/28721699/root-password-inside-a-docker-container
RUN echo "jovyan:Docker!" | chpasswd

# jovyan user name somehow chosen by someone that i do not know, yet. kind of forced to use!
# REF: https://mybinder.readthedocs.io/en/latest/dockerfile.html#preparing-your-dockerfile
USER jovyan

# create flint and arb path for the container when it used by mybinder.org
# some how mybinder.org does not see .bashrc or .profile files
ENV LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:/home/jovyan/pylibs/flint2:/home/jovyan/pylibs/arb"

# force the container to use bash
# REF: https://stackoverflow.com/questions/33467098/how-can-the-terminal-in-jupyter-automatically-run-bash-instead-of-sh
ENV SHELL "/bin/bash"

# working directory
WORKDIR /home/jovyan

# to test whether flint library is installed or not
ADD flint_test.ipynb  /home/jovyan/flint_test.ipynb
================================================================
